// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/ansrivas/fiberprometheus/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"order-worker/config"
	"order-worker/internal/app/orders"
	"order-worker/internal/infrastructure/adapter/productserv"
	"order-worker/internal/infrastructure/adapter/storeserv"
	"order-worker/internal/infrastructure/adapter/vouchersev"
	"order-worker/internal/infrastructure/persistence/db"
	"order-worker/internal/infrastructure/persistence/order"
	"order-worker/internal/order_cron"
	"order-worker/internal/publisher"
	"order-worker/internal/worker"
)

// Injectors from server.go:

func New() (*Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	gorm := db.NewMySQLConnection(configConfig)
	repository := order.NewGormRepository(gorm)
	service := productserv.NewProductServAdapter(configConfig)
	storeservService := storeserv.NewStoreServiceAdapter(configConfig)
	voucherservService := voucherserv.NewUserServHttpAdapter(configConfig)
	messageProducer := publisher.InitWorkerProducer(configConfig)
	usecase := orders.NewOrderService(repository, service, storeservService, voucherservService, messageProducer)
	consumerOrderMessage := worker.NewConsumerOrderMessage(configConfig, usecase)
	consumerRatingMessage := worker.NewConsumerRatingMessage(configConfig, usecase)
	cron := order_cron.NewCronInstance()
	orderCompleteCronjob := order_cron.NewOrderCompleteCronjob(cron, configConfig, usecase)
	server := NewServer(configConfig, consumerOrderMessage, consumerRatingMessage, orderCompleteCronjob)
	return server, nil
}

// server.go:

type Server struct {
	app                  *fiber.App
	cfg                  *config.Config
	orderCreateConsumer  *worker.ConsumerOrderMessage
	ratingUpdateConsumer *worker.ConsumerRatingMessage
	orderCompleteCJ      *order_cron.OrderCompleteCronjob
}

func NewServer(
	cfg *config.Config,
	orderSubscriber *worker.ConsumerOrderMessage,
	ratingSubscriber *worker.ConsumerRatingMessage,
	orderCompleteCron *order_cron.OrderCompleteCronjob) *Server {

	app := fiber.New(fiber.Config{})

	app.Use(logger.New())

	prometheus := fiberprometheus.New("order-worker")
	prometheus.RegisterAt(app, "/metrics")
	app.Use(prometheus.Middleware)

	app.Get("", func(ctx *fiber.Ctx) error {
		s := struct {
			Message string `json:"message"`
			Version string `json:"version"`
		}{
			Message: "Order worker was developed by TienDat",
			Version: "v0.0.1",
		}
		return ctx.JSON(s)
	})

	return &Server{
		cfg:                  cfg,
		app:                  app,
		ratingUpdateConsumer: ratingSubscriber,
		orderCreateConsumer:  orderSubscriber,
		orderCompleteCJ:      orderCompleteCron,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.Config {
	return serv.cfg
}

func (serv Server) ConsumerOrderMessage() *worker.ConsumerOrderMessage {
	return serv.orderCreateConsumer
}

func (serv Server) ConsumerRatingMessage() *worker.ConsumerRatingMessage {
	return serv.ratingUpdateConsumer
}

func (serv Server) OrderCompleteCJ() *order_cron.OrderCompleteCronjob {
	return serv.orderCompleteCJ
}
