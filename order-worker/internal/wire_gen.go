// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"order-worker/config"
	"order-worker/internal/app/orders"
	"order-worker/internal/infrastructure/adapter/productserv"
	"order-worker/internal/infrastructure/persistence/db"
	"order-worker/internal/infrastructure/persistence/order"
	"order-worker/internal/message"
	"order-worker/pkg/cache"
)

// Injectors from server.go:

func New() (*Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	gorm := db.NewMySQLConnection(configConfig)
	repository := order.NewGormRepository(gorm)
	service := productserv.NewProductServAdapter(configConfig)
	cacheEngine, err := cache.NewCacheEngine(configConfig)
	if err != nil {
		return nil, err
	}
	usecase := orders.NewOrderService(repository, service, cacheEngine)
	consumerOrderMessage := message.NewConsumerOrderMessage(configConfig, usecase)
	server := NewServer(configConfig, consumerOrderMessage)
	return server, nil
}

// server.go:

type Server struct {
	app      *fiber.App
	cfg      *config.Config
	consumer *message.ConsumerOrderMessage
}

func NewServer(
	cfg *config.Config,
	consumer *message.ConsumerOrderMessage) *Server {

	app := fiber.New(fiber.Config{})

	app.Use(logger.New())

	app.Get("", func(ctx *fiber.Ctx) error {
		return ctx.JSON("Orders service developed by Tien Dat")
	})

	return &Server{
		cfg:      cfg,
		app:      app,
		consumer: consumer,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.Config {
	return serv.cfg
}

func (serv Server) Consumer() *message.ConsumerOrderMessage {
	return serv.consumer
}
